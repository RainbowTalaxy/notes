引用计数器
每个对象都有引用计数器
当引用计数器为0是系统会回收这个对象
任何一个对象刚生下来的时候，引用计数器默认为1

引用计数器常见操作：
retain消息：引用计数器+1
release消息：引用计数器-1
retainCount消息：获取引用计数器的值
release仅仅是计数-1，不代表销毁释放

dealloc：销毁对象方法
不能直接调用dealloc方法
当引用计数器为0时，系统会自动给对象发一条dealloc消息

@autoreleasepool{}
代码块里的是局部变量，且会自动销毁

ARC：automatic reference counting 自动引用计数
不需要程序员管理内容，编译器会在适当的地方添加release/retain等代码
注意点：
OC中的ARC和Java的的不一样，Java是系统干的，OC是编译器干的

MRC：mannul reference counting 手动引用计数(过去的主要机制）

重写dealloc一定要记得写super消息，且要写在最后一行

内存管理的原则：有加就有减

__func__ 是用来存方法名的参数

如果一个指针指向了一个被释放的对象（僵尸对象），那么称这个指针为野指针
（记得打开僵尸对象监听）
空指针 nil 0
为了避免野指针报错，当一个对象释放后，将这个指针设置为空指针
即 p = nil；













