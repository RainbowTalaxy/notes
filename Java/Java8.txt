第八章 泛型程序设计

一个简单的泛型类：
————————————————————
public class Model<T>
{
    private T t;

    public Model() { t = null; }
    public Model(T t) { this.t = t; }

    public T getT() { return t; }
    public void printT() { System.out.println(t); }
    
}
————————————————————
其中，Model类引入了一个类型变量T
泛型类可以有多个类型变量，例如：
public class Model<T, U, ...> { ... }

一般，类型变量的命名使用大写形式，且长度短
在Java库中，使用变量 E 表示 集合 的元素类型
K 和 V 分别表示 表 的关键字与值得类型
T, U, S, ... 表示任意类型

泛型方法的定义样例：
public <T> T setT(T t) { ... }
其中，类型变量以及尖括号需放在修饰符后，返回类型的前面
可以这样调用泛型方法：
String m = t.<String>setT(String str);
但如果编译器有足够的信息推断出所调用的方法（比如形参中有类型变量）
调用的时候则可以省略类型变量，即可以写成：
String m = t.setT(String str);

类型变量的限定
有的时候，泛型方法内会调用 类型变量对象的 接口/类 方法
但有时不能确定 类型变量是否实现了 接口/类 方法
比如：
————————————————————
class Model{
    public static <T> void min(T[] a){
        ...
        if(a[i].comparaTo(a[j]) > 0) a[i] = a[j];
        ...
    }
}
————————————————————
其中，min 方法中调用了 compareTo() 方法
compareTo 是 Comparable 的 方法
但我们不能确信 类型T 实现了 接口Comparable
所以为了限制 T 的类型，以确保 T 实现了Comparable 接口，可以写成：
public static <T extends Comparable> void min(T[] a) { ... }
一个类型变量可以有多个限定，限定之间用 & 分隔，比如：
public static <T extends A & B> void min(T[] a) { ... }

P316





























