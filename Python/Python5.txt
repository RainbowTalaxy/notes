第九章 类

在Python中约定，首字母大写的名称是类
每当根据类创建新实例的时候，都会自动运行 __init__ 方法
并且该方法会自动返回实例本身
__init__ 的形参中，self 必不可少且需要放在所有形参的前面，比如：
class Person():
	def __init__(self, name, age):
		self.name = name
		self.age = age
但在实参中，我们不需要写 self ，因为 self 会被自动传递

在Python27中，创建类需要做细微修改，在类名后的括号内打上 object ：
class Person(object):    #Python27创建类
	...

创建类实例：
p = Person('Alex', 6)

可以在 __init__ 中给属性指定默认值，比如：
class Person():
	def __init__(self, name, age):
		self.name = name
		self.age = age
		self.sex = "male"    #实参和形参均不能包含该参数

可以用 . 直接对对象属性进行修改，比如：
p = Person('Alex', 6)
p.name = 'Steve'
但Python鼓励用方法来修改属性值

继承中，子类的 __init__ 需要先完成父类的 __init__ ,比如：
class Student(Person):
	def __init__(self, name, age, major):
		super().__init__(name, age)
		self.major = major

Python27中的继承有稍微不同，比如：
class Student(Person):
	def __init__(self, name, age, major):
		super(Student, self).__init__(name, age)
		self.major = major

定义同名方法即能重写父类方法

和函数一样，可以通过模块（即.py文件）导入类，且语法一致，比如：
from person import Person, Student, ...
from person import *    #不推荐该导入方式
或者：
import person    #导入整个模块

模块里也可以导入别的模块

字典不能记录你添加键值对的顺序，但是可以使用OrderDict类实现

类编码风格：
类名中的每个单词的首字母应当大写，而不是用下划线
实例名和模块名应当使用小写，并在单词间添加下划线
在 类/方法 的下一行可以用 批注 对 类/方法 进行描述
批注可以用三个引号(单双皆可），比如：
class Person():
	"""人类"""

	def __init__(self, name, age):
		"""初始化属性"""
		self.name = name
		self.age = age

每个方法之间可以用一个空行，模块中每个类之间可以用两个空行